#!/bin/bash

## Author: W. Pettersson Â© 2018 licensed under GPL
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.

## Author: Nawar
## License: GPL (c) 2014
##
## Note:
## This script used the youtube code of:
##   YouTube XBMC Script 1.0
##   (c) 2013, Tom Laermans - http://tom.laermans.net
##   This script is released into the public domain.
##
## Volume control added by elpraga
## using the command found at http://forum.kodi.tv/showthread.php?tid=176795



## Configure your KODI RPC details here
#set -x
KODI_HOST="${KODI_HOST:-localhost}"
KODI_PORT="${KODI_PORT:-80}"
KODI_USER="${KODI_USER:-}"
KODI_PASS="${KODI_PASS:-}"
TWITCH_QUALITY="${TWITCH_QUALITY:-720p60}"
# Default twitch quality. Can be 360p, 720p, 720p60, 1080p, 1080p60, Source, etc., but if the selected quality isn't
# available the stream won't launch.


LOCK=false

function parse_json {
  key=$1
  awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/'$key'\042/){print $(i+1)}}}' | tr -d '"'
}

function xbmc_req {
  if [ $2 ] ; then
    curl -s -X POST --header "Content-Type: application/json" -d "$1" http://$KODI_USER:$KODI_PASS@$KODI_HOST:$KODI_PORT/jsonrpc
  else
    curl -s -X POST --header "Content-Type: application/json" -d "$1" http://$KODI_USER:$KODI_PASS@$KODI_HOST:$KODI_PORT/jsonrpc > /dev/null
  fi
}

function play_bbc {
  URL=$1
  echo -n "Opening BBC from URL $URL on $KODI_HOST ..."

  # clear the list
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Clear", "params":{"playlistid":1}, "id": 1}';

  # add the video to the list
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Add", "params":{"playlistid":1, "item" :{ "file" : "plugin://plugin.video.iplayerwww/?mode=202&url='${URL}'"}}, "id" : 2}';

  # open the video
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Open", "params":{"item":{"playlistid":1, "position" : 0}}, "id": 1}';

  echo " done."
}

function play_twitch {
  ID=$1
  if [ "$2" ] ; then
    QUALITY=$2
  else
    QUALITY=${TWITCH_QUALITY}
  fi
  echo -n "Opening channel $ID at ${QUALITY} on $KODI_HOST ..."

  # clear the list
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Clear", "params":{"playlistid":1}, "id": 1}';

  # add the video to the list
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Add", "params":{"playlistid":1, "item" :{ "file" : "plugin://plugin.video.twitch/?mode=play&channel_name='${ID}'&quality='${QUALITY}'"}}, "id" : 2}';

  # open the video
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Open", "params":{"item":{"playlistid":1, "position" : 0}}, "id": 1}';

  echo " done."
}

function play_direct_link {
  link=$1
  echo -n "Opening $link on $KODI_HOST ..."
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Open", "params":{"item":{"file": "'${link}'"}}, "id": 1}';
  echo " done."
}

function play_youtube {

  REGEX="^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*"

  ID=$1

  if [ "$ID" == "" ];
  then
    echo "Syntax $0:$1 <id|url>"
    exit
  fi

  if [[ $ID =~ $REGEX ]]; then
    ID=${BASH_REMATCH[7]}
  fi

  echo -n "Opening video id $ID on $KODI_HOST ..."
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Clear", "params":{"playlistid":1}, "id": 1}';

  # add the video to the list
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Add", "params":{"playlistid":1, "item" :{ "file" : "plugin://plugin.video.youtube/?action=play_video&videoid='$ID'"}}, "id" : 1}';

  # open the video
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Open", "params":{"item":{"playlistid":1, "position" : 0}}, "id": 1}';

  echo " done."
}

function queue_yt_videos {

  REGEX="^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*"

  ID=$1

  if [ "$ID" == "" ];
  then
    echo "Syntax $0:$1 <id|url>"
    exit
  fi

  if [[ $ID =~ $REGEX ]]; then
    ID=${BASH_REMATCH[7]}
  fi

  #output=`xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.GetItems", "params":{"playlistid":1}, "id": 95}' true`
  # Changed this to playlist 0 because that's the default one:
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.GetItems", "params":{"playlistid":0}, "id": 95}' true`
  numberitems=`echo $output | parse_json "total"`

  #if false; then
  echo playlist 0:
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.GetItems", "params":{"playlistid":0}, "id": 97}' true
  echo playlist 1:
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.GetItems", "params":{"playlistid":1}, "id": 96}' true
  return;
  #fi

  #xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.GetItems", "params":{}, "id": 98}' true
  #xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.GetItems", "id": 98}' true

  echo -n "Video with $ID added to playlist 0 on $KODI_HOST which has ($numberitems) items..."
  # add the video to the list
  # xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Add", "params":{"playlistid":1, "item" :{ "file" : "plugin://plugin.video.youtube/?action=play_video&videoid='$ID'"}}, "id" : 1}';
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Add", "params":{"playlistid":0, "item" :{ "file" : "plugin://plugin.video.youtube/?action=play_video&videoid='$ID'"}}, "id" : 1}';

  echo " done."
}

function play_pause {
  # Get Active players first
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 99}' true`
  player_id=`echo $output | parse_json "playerid"`
  echo "Pausing/Playing the player with ID => $player_id"
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.PlayPause", "params": { "playerid": '$player_id' }, "id": 1}' 
}

function play_file_or_url {
  FILE=$1

  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Clear", "params":{"playlistid":1}, "id": 1}';

  # add the video to the list
  xbmc_req '{"jsonrpc": "2.0", "method": "Playlist.Add", "params":{"playlistid":1, "item" :{ "file" : "'"$FILE"'"}}, "id" : 1}';

  # open the video
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Open", "params":{"item":{"playlistid":1, "position" : 0}}, "id": 1}';
}

function do_addon_list {
  #See http://kodi.wiki/view/addon.xml for more formats
  #xbmc.addon.audio
  #xbmc.addon.video
  ADDONTTYPE=$1
  if [ "$ADDONTTYPE" == "" ];
  then
    echo "Retrieving addon list"
    output=`xbmc_req '{"jsonrpc": "2.0", "method": "Addons.GetAddons", "id": 99}' true`
  else
    echo "Retrieving $ADDONTTYPE addon list"
    output=`xbmc_req '{"jsonrpc": "2.0", "method": "Addons.GetAddons", "params": { "type": "'$ADDONTTYPE'" }, "id": 99}' true`
  fi

  echo $output
}

function do_addon_exec {
  ID=$1
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Addons.ExecuteAddon", "params": { "addonid": "'$ID'" }, "id": 99}' true`
  echo $output
}

function do_addon_playitem {
  DIR=$1
  SUBDIR="$2"
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Files.GetDirectory", "params": { "directory": "'$DIR'" }, "id": 99}' true`
  
  error=`echo $output | jq -r '.error .message'`
  
  if [ "$error" == "null" ]
  then

    item=`echo $output | jq -r '.result .files[] | select(.label=="'"$SUBDIR"'")'`
    itemtype=`echo $item | jq -r '.filetype'`
    file=`echo $item | jq -r '.file'`
    if [ "$file" == "" ]
    then
      echo "Directory or file $SUBDIR not found";
    elif [ "$itemtype" == "directory" ]
    then
      echo "Finding $SUBDIR"
      do_addon_playitem "$file" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10"
    elif [ "$itemtype" == "file" ]
    then
      play_file_or_url "$file"
    fi 
  else
    echo "Kodi reported an error: $error" 
  fi
}

function do_addon {
  case "$1" in
    list) 
      do_addon_list $2
      ;;
    exec)
      do_addon_exec $2 $3
      ;;
    play)
      echo "Addon play - looking for $3"
      do_addon_playitem "plugin://$2/" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10"
      ;;
    *) echo "$1 is not a valid command for -a"
  esac

}


function do_favourites_get {
  echo "Retrieving favourites list"
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Favourites.GetFavourites", "params": { "properties": [ "window","path","windowparameter" ] } , "id": 99}' true`

  echo $output
}

# Placeholder function, ready for future implementation.
function do_favourites_add {
  echo "WARNING: adding favourites is not (yet) supported."
}


function do_favourites {
  case "$1" in
    get)
      do_favourites_get
      ;;
    add)
      do_favourites_add
      ;;
    *) echo "ERROR: $1 is not a valid, supported subcommand."
  esac
}


function list_get_directory {
  DIR=$1
  if [ "$DIR" == "" ];
  then
    echo "Directory is required"
    exit
  fi
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Files.GetDirectory", "params": { "directory": "'$DIR'" }, "id": 99}' true`
  
  echo $output | jq -r '.result .files[] | "\(.label): \(.file) (\(.filetype))"'

}

function stop {
  # Get Active players first
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 99}' true`
  player_id=`echo $output | parse_json "playerid"` 
  echo "Stopping the player with ID => $player_id"
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Stop", "params": { "playerid": '$player_id' }, "id": 1}'
}

function send_text {
  echo "Sending the text"
  xbmc_req '{"jsonrpc": "2.0", "method": "Input.SendText", "params": { "text": "'$1'" }}'
}

function press_key {

  ACTION=''
  CLR="\e[K"

  case "$1" in
    A) ACTION='Up'
      echo -ne "\rUp$CLR";
      ;;
    B) ACTION='Down'
      echo -ne "\rDown$CLR";
      ;;
    C) ACTION='Right'
      echo -ne "\rRight$CLR";
      ;;
    D) ACTION='Left'
      echo -ne "\rLeft$CLR";
      ;;
    c) ACTION='ContextMenu'
      echo -ne "\rContext Menu$CLR";
      ;;
    i) ACTION='Info'
      echo -ne "\rInformation$CLR";
      ;;
    $'\177') ACTION='Back'
      echo -ne "\rBack$CLR";
      ;;
    "") ACTION='Select'
      echo -ne "\rSelect$CLR";
      ;;
   esac

  if [[ "$ACTION" != " " ]] && [[ $LOCK == false ]]
  then
  LOCK=true
  xbmc_req '{"jsonrpc": "2.0", "method": "Input.'$ACTION'"}'
  LOCK=false
  fi
}

function handle_keys {
echo "Interactive navigation key: ";
while :
do
  read -s -n1 key
  if [[ $key = q ]]
  then
    break
  elif [[ $key != ' ' ]]
  then
    press_key "$key"
  fi
done
}

function volume_up {
  echo "Incrementing volume"
  xbmc_req '{ "jsonrpc": "2.0", "method": "Application.SetVolume", "params": { "volume": "increment" }, "id": 1 }'
}

function volume_down {
  echo "Decrementing volume on"
  xbmc_req '{ "jsonrpc": "2.0", "method": "Application.SetVolume", "params": { "volume": "decrement" }, "id": 1 }'
}

function volume_max {
  echo "Setting volume max"
  xbmc_req '{ "jsonrpc": "2.0", "method": "Application.SetVolume", "params": { "volume": 100 }, "id": 1 }'
}

function fullscreen_toggle {
  # Get Active players first
  output=`xbmc_req '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 99}' true`
  player_id=`echo $output | parse_json "playerid"`
  echo "Toggle fullscreen on the player with ID => $player_id"
  xbmc_req '{ "jsonrpc": "2.0", "method": "GUI.SetFullscreen", "params": { "fullscreen": "toggle" }, "id": 1 }'
}

rawurlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"    # You can either set a return variable (FASTER)
  REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}

function play_xbmctorrent() {
  REGEX="^magnet:.*|.*\.torrent$"
  if ! [[ "${1}" =~  ${REGEX} ]]; then
    echo "Not a torrnet / magnet address"
    exit 1
  fi
  echo -n "Torrent link sending: ${1}"
  ID="${1}"
  xbmc_req '{"jsonrpc": "2.0", "method": "Player.Open", "params":{"item":{ "file" : "plugin://plugin.video.xbmctorrent/play/'$(rawurlencode "$1")'" }}, "id": 1}'
}




function print_usage() {
echo -e "\n kodi-cli -[p|i|h|s|y youtbe URL/ID|t 'text to send']\n\n" \
  "-p Play/Pause the current playing video.\n" \
  "-s Stop the current playing video.\n" \
  "-y Play youtube video. Use either URL/ID (of video).\n" \
  "-q Queue youtube video to the current list. Use either URL/ID (of video). Use instead of -y.\n" \
  "-o Play youtube video directly on Kodi. Use the name of video.\n" \
  "-i Interactive navigation mode. Accept keyboard keys of Up, Down, Left, Right, Back,\n" \
  "  Context menu and information\n" \
  "-B Play BBC iPlayer stream. Should be passed the URL to an iPlayer episode as copied from a browser (not just episode list or programme details) as an argument.\n" \
  "-T Play Twitch live stream. Needs name of channel as argument. Optional second argument is quality\n" \
  "-D Play a direct video link. Needs URI of the link as argument.\n" \
  "-t Send text to Kodi to display on screen. Pass 'text to send as a parameter.'\n" \
  "-r 'magnetlink' Magnet link to play via xbmctorrent\n" \
  "-u Increase the volume on Kodi\n" \
  "-a Interact with the addons namespace, you can use the following subcommands:\n" \
  "\tlist [filter] - Retrieves a list of addons. Optionally accepts a filter i.e. xbmc.addon.video \n" \
  "\texec addon action - Execute an action on an addon\n" \
  "\tplay addon subdir [subdir...] file - Chdirs into the subdirectories of the addon and starts playing a item. Useful for addons with changing URLs\n" \
  "-F Interact with the favourites namespace, you can use the following subcommands:\n" \
  "\tget - Retrieves a list of favourites.\n" \
  "-L List files in a directory\n" \
  "-d Decrease the volume on Kodi\n" \
  "-m Set max volume on Kodi\n" \
  "-f Toggle fullscreen\n" \
  "-h Show this help message\n"
}

## Process command line arguments
while getopts "yqopstiudfhBTDraLFm" opt; do
  case $opt in
    y)
      #play youtube video
      play_youtube $2
      ;;
    o)
      #play youtube video directly
      #this depends on using mps-youtube
      play_youtube `mpsyt /$2, i 1, q | grep -i link | awk -F 'v=' '{ print $2 }'`
      ;;
    p)
      play_pause
      ;;
    s)
      stop
      ;;
    r)
      play_xbmctorrent "$2"
      ;;
    t)
      send_text $2
      handle_keys
      ;;
    L)
      list_get_directory $2
      ;;
    B)
      play_bbc $2
      ;;
    T)
      play_twitch $2 $3
      ;;
    D)
      play_direct_link $2
      ;;
    q)
      queue_yt_videos $2
      ;;
    u)
      volume_up
      ;;
    d)
      volume_down
      ;;
    m)
      volume_max
      ;;
    f)
      fullscreen_toggle
      ;;
    F)
      shift
      do_favourites $@
      ;;
    a)
      do_addon "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10"
      ;;
    i)
      handle_keys
      ;;
    \? | h) # print usage also on getopts errors
      print_usage
      exit 1
      ;;
  esac
  exit 0
done

# print usage on empty args
print_usage
exit 1

